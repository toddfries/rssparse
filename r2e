#!/usr/bin/perl

# Copyright (c) 2010 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use XML::Atom::Feed;
use XML::Feed;
#use XML::Feed::Enclosure;
#use XML::Feed::Format::RSS;
use LWP::UserAgent;
use HTML::FormatText::WithImgLinks;
use Encode qw( encode decode );
use Date::Manip;
use DateTime;
our $dtfdmanip = 1;
#eval {
#	require DateTime::Format::DateManip;
#};
#if ($@) {
	$dtfdmanip = 0;
#} else {
#	use DateTime::Format::DateManip;
#}
	
use POSIX qw(strftime);
use POSIX ":sys_wait_h";
use Digest::SHA qw/sha256_base64/;
use Data::Dumper;

use FDC::db;

use XML::RSS;
$XML::RSS::AUTO_ADD = 1; # force acceptance of extra namespaces

use Encode qw( encode decode );

use FDC::CleanText;

#$XML::Feed::Format::RSS::PREFERRED_PARSER = "XML::RSS::LibXML";
#$XML::Feed::MULTIPLE_ENCLOSURES=1;

use OpenBSD::Getopt;

our $opt_v = 0;
our $opt_q = 0;
our $opt_a;
our $opt_p = 0;
our $opt_d;
our $opt_r;
getopts('a:d:pqr:v');

my $verbose = $opt_v;
my $quiet = $opt_q;
if ($verbose) {
	$| = 1; # Enable autoflush, to help with ordered output/debugging
}

our %children;
our $entrypid = 0;
our $forkdebug = 0;

my $config_file = $ENV{'HOME'}."/.r2e.conf";
my %conf;
if (open(C, $config_file)) {
	while (<C>) {
		next if /^#/;
		last if /^END$/;
		my $line;
		chomp($line=$_);
		my ($var,$val) = split(/=/,$line,2);
		if ($verbose) {
			printf STDERR "conf{%s} = '%s'\n",$var,$val;
		}
		push @{$conf{$var}}, $val;
	}
	close(C);
} else {
	die "Failed to open config $config_file: $!";
}

if (!defined(${$conf{'email'}}[0])) {
	die "Failed to find 'email' in config $config_file";
}
if (!defined(${$conf{'defaultfrom'}}[0])) {
	${$conf{'defaultfrom'}}[0] = "r2e\@example.com";
}
if (!defined(${$conf{'max_concurrency'}}[0])) {
	${$conf{'max_concurrency'}}[0] = 3;
}

our $inserted;
our $insertactioncount;
our $skipactioncount;

my $ua = LWP::UserAgent->new();
$ua->agent( "R2E/0.0 " . $ua->agent );
$ua->env_proxy();

our $dsn = "dbi:SQLite:dbname=$ENV{'HOME'}/.r2e.db";

my @URLS;
my $db = FDC::db->new($dsn,"","");
my $dbh = $db->getdbh();
my @tables = $dbh->tables();
my $dbtab = "r2e_ids";
my $dbfee = "r2e_feeds";
my $create_dbtab = 1;
my $create_feeds = 1;
my ($feedcount,$feednew,$idcount,$idnew) = (0,0,0,0);
foreach my $tname (@tables) {
	if ($tname =~ m/\"${dbtab}\"/) {
		$create_dbtab = 0;
	}
	if ($tname =~ m/\"${dbfee}\"/) {
		$create_feeds = 0;
	}
}
my $query;
if ($create_dbtab) {
	$query = "CREATE TABLE ${dbtab} (feedid integer, guid varchar(256), cdate datestamp DEFAULT CURRENT_TIMESTAMP)";
	$db->doquery($query);
}
if ($create_feeds) {
	$query = "CREATE TABLE ${dbfee} (feedurl varchar(256), edate datestamp DEFAULT CURRENT_TIMESTAMP)";
	$db->doquery($query);
}

if ($opt_p > 0) {
	$query = "SELECT rowid,* from ${dbfee}";
	my $sth = $db->doquery($query);
	if (defined($sth) && $sth != -1) {
		while (my ($id,$url) = $sth->fetchrow_array) {
			printf "%4d: %s\n",$id,$url;
		}
		$sth->finish;
	}
	exit(0);
}
if (defined($opt_d)) {
	if ($opt_d < 1) {
		die "'-d <id>' to delete an id, invalid syntax: $opt_d";
	}
	$query = "SELECT rowid,feedurl from ${dbfee} where rowid = $opt_d";
	my $sth = $db->doquery($query);
	my ($rowid,$feedurl) = $sth->fetchrow_array;
	$query = "DELETE from ${dbfee} where rowid = $opt_d";
	$db->doquery($query);
	$query = "DELETE from ${dbtab} where feedid = $opt_d";
	$sth = $db->doquery($query);
	if (!defined($sth) || $sth == -1 || !defined($rowid) || !defined($feedurl)) {
		printf STDERR "Unable to delete id %s: $!\n",$opt_d;
		exit(1);
	}
	printf STDERR "%4d: %s (deleted, rowid = %d)\n",$opt_d,$feedurl,$rowid;
	exit(0);
}

if (defined($opt_a) && length($opt_a) > 0) {
	$db = undef;
	$inserted = 0;
	my $feedid = feed_cache($opt_a);
	if (!defined($feedid)) {
		printf STDERR "\nfeed_cache('%s') failed!\n",$opt_a;
		next;
	}
	my $action="";
	if ($inserted == 0) {
		$action = "duplicate";
	} else {
		$action = "added";
	}
	printf "%4d: %s (%s)\n",$feedid,$opt_a,$action;
	exit(0);
}

$query = "SELECT feedurl from ${dbfee}";
if (defined($opt_r)) {
	if ($opt_r > 0) {
		$query .= " where rowid = $opt_r";
	} else {
		die "Invalid -r argument: $opt_r";
	}
}

my $sth = $db->doquery($query);
if (!defined($sth)) {
	die "Failed to get URL list from db: $!";
}
if ($sth == -1) {
	die "Failed to get URL list from db: $!";
}

while(my $URL = $sth->fetchrow_array) {
	push @URLS,$URL;
}
$db = undef;

my $i = 0;
if ($quiet < 1) {
	printf STDERR "About to handle %d URLs\n",$#URLS+1;
}

foreach my $URL (@URLS) {
	my ($content,$req,$res,$text,$feed);

	my $feedid = feed_cache($URL);
	if (!defined($feedid)) {
		printf STDERR "\nfeed_cache('%s') failed!\n",$URL;
		next;
	}
	$feedcount++;

	if ($quiet < 1) {
		printf STDERR "%4d: %s start[$$] %d\n", $feedid, $URL, $i++;
	}
	if ($verbose > 0 || $forkdebug > 0) {
		printf STDERR "    [Parent[$$], Children: %d\n",scalar keys %children;
	}

	if ($verbose == 0) {
		$entrypid = rlfork();
		if ($entrypid > 0) {
			next;
		}
		@URLS = ();
	}
	if ($verbose > 0 || $forkdebug > 0) {
		printf STDERR "%4d: %s (processing[$$])\n", $feedid, $URL;
	}

	eval {
		$req = HTTP::Request->new(GET => $URL);

		$res = $ua->request( $req );

		$text = $res->content_ref;
	};
	if ($@) {
		printf STDERR "Request error: $@\n";
		if ($verbose == 0) {
			exit(0);
		}
		next;
	}
	if ($$text =~ m/^[0-9]{1,3} /) {
		printf STDERR "HTTP error: %s\n",$$text;
		if ($verbose == 0) {
			exit(0);
		}
		next;
	}
	if ($verbose > 0 || $forkdebug > 0) {
		printf STDERR "%4d: %s (retrieved[$$])\n", $feedid, $URL;
	}

	$text =~ s/\x{0d}$//g;
	$content = decode('utf-8', $$text);
	$feed = parsefeed($URL,$content);

	if (!defined($feed)) {
		$content = decode('utf-8', FDC::CleanText::recode($text));
		$feed = parsefeed($URL,$content);
		if (!defined($feed)) {
			$content = $$text;
			$feed = parsefeed($URL,$content);
		}
	}
	$content = undef;
	if (!defined($feed)) {
		printf STDERR "%s: !feed\n",$URL;
		if ($verbose > 0 ) {
			printf STDERR "%s: text = '%s'\n",$URL,$$text;
			next;
		} else {
			exit(0);
		}
	}

	my ($site) = $URL =~ m@^(.*://?[^/]+)/@;
	my ($base) = $URL =~ m@^(.*://?.+)/@;

	#printf "%4d: is a %s\n",$feedid,ref($feed);
	if (ref($feed) eq "XML::Feed::Format::Atom") {
		if (defined($feed->{atom}->{elem})) {
			my $tmpfeed = $feed->convert('RSS', version => '2.0');
			$feed = $tmpfeed;
			$tmpfeed = undef;
		}
	}
	#printf "%4d: is a %s\n",$feedid,ref($feed);
	my $feedauthor = $feed->author();
	if (!defined($feedauthor)) {
		$feedauthor = $feed->{rss}->{channel}->{dc}->{creator};
	}
	if (defined($feedauthor)) {
		if (!($feedauthor =~ /\@/)) {
			$feedauthor = undef;
		}
	}
	my $feedemail  = $feed->{rss}->{channel}->{dc}->{creator};
	my $feedsubject = $feed->{rss}->{channel}->{dc}->{subject};
	my $feedfromname = handletext($feed->language,$feed->title,0);
	my $feedlanguage = $feed->language;
	my $recipient = ${$conf{'email'}}[0];
	my $entrycount = 0;
	my ($total_count,$dl_count,$found_count,$ignore_count)=(0,0,0,0);
	if ($verbose) {
		print STDERR recurse_dump($feed);
		if (0) {
		if (defined($feed->{atom}->{elem})) {
			print STDERR recurse_dump($feed->convert('RSS',
			    version => '2.0'));
		}
		}
	}
	$skipactioncount = $insertactioncount = 0;
	for my $entry ($feed->entries) {
		$total_count++;
		if ($verbose) {
			printf STDERR "\n%d.",++$entrycount;
		}
		my $body = $entry->content->body;
		if (!defined($body)) {
			$body = $entry->summary->body;
		}
		if (!defined($body)) {
			$body = $entry->{'content'};
		}
		if (!defined($body)) {
			$body = $entry->{'title'};
		}
		if (!defined($body)) {
			if ($verbose > 0) {
				printf STDERR "empty body:\n";
				$body = recurse_dump($entry);
				printf STDERR "%s\n",$body;
				printf STDERR "entry is a %s\n",ref($entry);
			}
		}

		my $guid = $entry->id();
		if (!defined($guid)) {
			$guid = $entry->{entry}->{guid};
		}
		if (!defined($guid)) {
			$guid = $entry->link();
		}
		if (!defined($guid)) {
			if ($verbose > 0) {
				printf STDERR "entry guid not locatable!\n";
				printf STDERR "%s\n",recurse_dump($entry);
			}
			$guid = sha256_base64($body);
		}
		my $guid_sha = sha256_base64($guid);
		$inserted = 0;
		guid_cache($feedid,$guid_sha);
		if ($inserted == 0) {
			$skipactioncount++;
			next;
		}
		$insertactioncount++;

		# XXX no sooner, so stats can be preserved
		my $pid;
		if ($verbose == 0) {
			$pid = rlfork();
			if ($pid > 0) {
				next;
			}
			$req = $res = $text = $feed = undef;
		} else {
			$pid = 0;
		}

		my $link = $entry->link();
		my $datetime = $entry->issued();
		if (!defined($datetime)) {
			$datetime = $entry->modified();
		}
		if (!defined($datetime) && defined($entry->{'pubDate'}) && $dtfdmanip == 1 ) {
			my $pubDate = $entry->{'pubDate'};
			my $dm = ParseDate($pubDate);
			$datetime = DateTime::Format::DateManip->parse_datetime($dm);
		}
		if (!defined($datetime)) {
			$datetime = DateTime->now();
		}
		$datetime->set_time_zone("US/Central");
		my $date = $datetime->strftime(
	    		"%a, %d %b %Y %H:%M:%S %z");
		
		my $itemfromname = $entry->author() ||
			$entry->{entry}->{dc}->{creator};
		my $itemsubject = $entry->{entry}->{dc}->{subject} ||
			$feedsubject;
		my $fromemail;
		if (defined($feedemail)) {
			$fromemail = $feedemail;
		} else {
			$fromemail = ${$conf{'defaultfrom'}}[0];
		}
		my $fromname;
		if (defined($feedfromname) && length($feedfromname) > 0) {
			$fromname = $feedfromname;
			if (defined($itemfromname)) {
				if ($feedfromname eq $itemfromname) {
					$itemfromname = "";
				}
			}
		}
		if (defined($itemsubject) && length($itemsubject) > 0) {
			if (length($fromname) > 0) {
				$fromname .= "/";
			}
			$fromname .= $itemsubject;
		}
		if (defined($itemfromname) && length($itemfromname) > 0) {
			$itemfromname =~ s/[[:space:]][[:space:]]*/ /gs;
			$itemfromname =~ s/[[:space:]]*$//g;
			$fromname .= ": $itemfromname";
			if (defined($feedauthor) &&
			    $feedauthor ne $itemfromname) {
				$fromname .= ", $feedauthor";
			}
		}
		if (defined($fromname)) {
			$fromname .= " ";
		} else {
			$fromname = "";
		}
		$fromname =~ s/[[:space:]][[:space:]]*/ /gs;
		my $fromstr = sprintf "%s<%s>",$fromname,$fromemail;
		if ($verbose) {
			printf STDERR "from %s\n%d.",decode('utf-8',$fromstr),
			    $entrycount;
		}

		my $title = $entry->title;
		#$title =~ s/^\s+(.*)\s+$//s;

		# !title = !save
		$title = "(untitled)" if ! defined($title);
		$title = handletext($feedlanguage,$title,0);

		$title =~ s/[[:space:]][[:space:]]*/ /gs;
		$title =~ s/^"(.*)"$/$1/g;

		# make browsing the result useful in a portable way
		$body =~ s@(href|src|data)="/@$1="$site/@gs;
		$body =~ s@(href|src|data)="(?!(http|ftp))@$1="$base/@gs;

		$body = handletext($feedlanguage,$body,1);
		if (compare($body,$title) && length($title) > 65) {
			$title = substr($title,0,55)."...";
		}
		my @tags;
		my $tags = "";
		if (function_exists("$entry->tags")) {
 			@tags = $entry->tags();
		}
		if (@tags) {
			foreach my $tag (@tags) {
				$tags .= "$tag,";
			}
			$tags =~ s/,$//;
		}
		my %vars;
		eval {
			if (defined($link)) {
				$vars{'URL'} = $link;
			}
			if (defined($entry->{entry}->{enclosure}) && function_exists("$entry->enclosure")) {
				my @encs = $entry->enclosure;
				foreach my $enc (@encs) {
					push @{$vars{'ENC'}},$enc;
				}
			}
			$vars{'LOC'}=$entry->{'entry'}->{
				'http://www.georss.org/georss'}->{'point'};
			if (!defined($vars{'LOC'})) {
				if (function_exists("$entry->lat") &&
				    function_exists("$entry->long")) {
					$vars{'LOC'}  = $entry->lat." ";
					$vars{'LOC'} .= $entry->long;
				}
			}
			$vars{'GUID'} = $guid;
		};
		if ($@) {
			printf STDERR "failed var assignments: $@\n";
		}
		if ($verbose) {
			printf STDERR "title %s\n%d.",encode('utf-8',$title),
			    $entrycount;
			printf STDERR " body %s\n%d.",encode('utf-8',$body),
			    $entrycount;
			printf STDERR " date %s\n%d.",$date,
			    $entrycount;
			printf STDERR " guid %s\n%d.",encode('utf-8',$guid),
			    $entrycount;
		}

		my $mailstr = "";
		eval {
		  $mailstr .= sprintf "From: %s\n",$fromstr;
		  $mailstr .= sprintf "To: %s\n",$recipient;
		  $mailstr .= sprintf "Subject: %s\n",encode('utf-8',$title);
		  $mailstr .= sprintf "Message-Id: <%s.%s\@r2e>\n",
			$guid_sha, strftime("%s",gmtime);
		  $mailstr .= sprintf "Date: %s\n",$date;
		  $mailstr .= sprintf "User-Agent: r2e\n";

		  if ($tags) {
			$mailstr .= sprintf "X-RSS-Tags: %s\n", $tags;
		  }
		  $mailstr .= sprintf "\n";
		  $mailstr .= sprintf "%s\n",$body;
		  $mailstr .= sprintf "\n";
		};
		if ($@) {
			printf STDERR "failed std mailstr ops: $@\n";
		}
		my $maxlen = 0;
		foreach my $v (keys %vars) {
			my $len = length($v);
			if ($len > $maxlen) {
				$maxlen = $len;
			}
		}
		# three items first in a specific order, the rest after
		my @order = ('URL','ENC',keys %vars);
		foreach my $v (@order) {
			my $val = $vars{$v};
			if ($verbose) {
				printf STDERR "var{$v} = %s\n",$val || "undef";
			}
			if (!defined($val)) {
				next;
			}
			if (ref($val) eq "") {
				if (length($vars{$v}) > 0) {
					$mailstr .= sprintf
					    "%${maxlen}s: %s\n", $v,$val;
				}
			} elsif (ref($val) eq "ARRAY") {
				foreach my $a (@{$val}) {
					if (ref($a) eq "") {
						if (length($a) > 0) {
							$mailstr .= sprintf
							    "%${maxlen}s: %s\n",
							    $v,$a;
						}
					} elsif (ref($a) eq
					    "XML::Feed::Enclosure") {
						if (length($a->url) > 0) {
							$mailstr .= sprintf
							    "%${maxlen}s: %s\n",
							    $v,$a->url;
						}
					}
				}
			} elsif (ref($val) eq
			    "XML::RSS::LibXML::MagicElement") {
				my @attr = $val->attributes();
				foreach my $att (@attr) {
					if ($att =~ m/isPermaLink/i) {
						next;
					}
					printf STDERR
					    "%s: unhandled ME attr %s\n",
					    $v,$att;
				}
			} else {
				printf STDERR "%s: unhandled ENC type %s\n",
				    $v,ref($val);
				printf STDERR "%s",recurse_dump($val);
			}
			$vars{$v} = undef;
		}
		if ($verbose) {
			print STDERR recurse_dump($entry);
		}
		$mailstr .= "\n";
		if ($verbose > 0) {
			open(MAIL,">>/dev/stdout");
		} else {
			#open(MAIL,">>/dev/null");
			open(MAIL,"|/usr/sbin/sendmail $recipient");
			#open(MAIL,">>/dev/stdout");
		}
		my $rv = print MAIL encode('utf-8',$mailstr);
		if (0) { # so the below always happens, test before re-enabling
		if ($rv != 0) {
			guid_uncache($feedid,$guid_sha);
		}
		}
		close(MAIL);
		if ($verbose == 0) {
			# Since this is a child...
			exit(0);
		}
	}
	if ($quiet < 1) {
		action_show($feedid);
	}
	if ($verbose == 0) {
		# Since this is a child...
		exit(0);
	}
}

my $childcount;
do {
	$childcount = scalar keys %children;
	if ($childcount > 0) {
		for my $kid (keys %children) {
			if ($verbose > 0 || $forkdebug > 0) {
				printf STDERR "Waiting for %d to exit...\n",$kid;
			}
			waitpid($kid, 0);
			# only one iteration to reduce racing chances, suggestions
			# on how to eliminate welcomed
			last;
		}
	}
} while ($childcount > 0);

exit(0);

1;

sub function_exists {    
    no strict 'refs';
    my $funcname = shift;
    return \&{$funcname} if defined &{$funcname};
    return;
}

sub
parsefeed
{
	my ($URL,$content) = @_;
	my $feed;
	eval {
		$feed = XML::Feed->parse(\$content);
	};
	if ($@ || !defined($feed)) {
		printf STDERR "%s: $@\n",$URL;
		if (defined(XML::Feed->errstr)) {
			printf STDERR "%s: %s\n",$URL,XML::Feed->errstr;
		}
		return undef;
	}
	my $author = $feed->author();
	if (defined($author)) {
		if ($feed->author() =~ /\@/) {
			return $feed;
		}
	}
	my $atom = XML::Atom::Feed->new(\$content);
	my $person = $atom->author();
	if (defined($person)) {
		$feed->{rss}->{channel}->{dc}->{creator} = $person->email();
	}
	return $feed;
}
sub
handletext
{
	my ($cset,$text,$wordwrap) = @_;
	my $r = "";
	eval {
		my $tdebug = 0;
		if ($tdebug > 0 ) {
			printf STDERR "Input : '%s'\n",$text;
		}
		$r = parse_to_text($cset,encode('UTF-8',$text),$wordwrap);
		if ($tdebug > 0) {
			foreach my $lang (('iso-8859-1','iso-8859-2',
			    'iso-8859-16','ascii','ascii-ctrl','utf-8')) {
				printf STDERR "Output: '%s'(%s)\n",
				    encode($lang,$r),$lang;
			}
		}
	};
	if ($@) {
		printf STDERR " .. parse_to_text failed! $@\n";
	}
	return $r; # encode('utf-8',$r);
}
sub
parse_to_text
{
	my ($rsscset,$text,$wordwrap) = @_;

	my $f = HTML::FormatText::WithImgLinks->new($rsscset,$wordwrap);
	eval {
		$text = $f->parse($text);
		$f = undef;
	};
	if ($@ || !defined($text)) {
		printf STDERR "parse error: $@\n";
	}

	return $text;
}

sub
recurse_dump
{
	my ($item) = @_;
	my $d = Data::Dumper->new([$item]);
	$d->Purity(1);
	$d->Terse(0);
	$d->Deepcopy(1);
	$d->Indent(2);
	$d->Sortkeys(1);
	#$d->Deparse(1);
	return $d->Dump();
}
sub
recurse_types
{
	my ($str,$item) = @_;
	if (!defined($item)) {
		return sprintf("%s undef\n",$str);
	}
	my $type = ref($item);
	if ($type eq "") {
		return sprintf("%s Data('%s'[%dB])\n",$str,$item,
		    length($item));
	}
	my $retstr = "";
	if ($type eq "HASH") {
		foreach my $hkey (keys %{$item}) {
			$retstr .= recurse_types("$str: $hkey =>",
			    ${$item}{$hkey});
		}
		return $retstr;
	}
	if ($type eq "ARRAY") {
		foreach my $subitem (@{$item}) {
			$retstr .= recurse_types("$str: (",$subitem);
		}
		return $retstr;
	}
	if ($type eq "REF") {
		$retstr .= recurse_types("$str: REF",$$item);
		return $retstr;
	}
	my %test = $item;
	if (keys %test) {
		foreach my $hkey (keys %test) {
			$retstr .= recurse_types("${str}"."::"."$hkey =>",
			    $test{$hkey});
		}
		return $retstr;
	}
	$retstr .= "$str: unhandled type: $type\n";
	return $retstr;
}
sub
compare
{
	my ($str1,$str2) = @_;

	$str1 =~ s/[[:space:]][[:space:]]*/ /g;
	$str2 =~ s/[[:space:]][[:space:]]*/ /g;
	return ($str1 eq $str2);
}

sub
guid_seen {
	my ($db,$feedid,$sha) = @_;
	my $query = sprintf("SELECT rowid from %s where feedid = %d and guid = '%s'",$dbtab,$feedid,$sha);
	if ($verbose > 0) {
		printf STDERR "guid_seen: query=\"%s\"\n",$query;
	}
	my $sth = $db->doquery($query);
	if (defined($sth) && $sth != -1) {
		my $oid = $sth->fetchrow_array;
		if ($verbose > 0) {
			printf STDERR "guid_seen: query returned %s\n",$oid;
		}
		$sth->finish;
		if (!defined($oid)) {
			return -1;
		}
		return $oid;
	}
	return -1;
}

sub
feed_seen {
	my ($db, $feedurl) = @_;
	my $query = sprintf "SELECT rowid from %s where feedurl = '%s'",
		$dbfee, $feedurl;
	if ($verbose > 0) {
		printf STDERR "feed_seen: query=\"%s\"\n",$query;
	}
	my $sth = $db->doquery($query);
	if (defined($sth) && $sth != -1) {
		my $oid = $sth->fetchrow_array;
		if ($verbose > 0) {
			printf STDERR "feed_seen: query returned %s\n",$oid;
		}
		$sth->finish;
		if (!defined($oid)) {
			return -1;
		}
		return $oid;
	}
	return -1;
}

sub
guid_uncache {
	my ($feedid,$sha) = @_;
	my $db = FDC::db->new($dsn,"","");
	my $oid = guid_seen($db, $feedid, $sha);
	if ($oid < 1) {
		$db = undef;
		return;
	}
	my $query = sprintf "DELETE FROM %s where rowid = %d",$dbtab,$oid;
	if ($verbose > 0) {
		printf STDERR "guid_uncache: %s\n",$query;
	}
	my $sth = $db->doquery($query);
	$sth->finish;
	$db = undef;
	return;
}
sub
guid_cache {
	my ($feedid,$sha) = @_;
	my $db = FDC::db->new($dsn,"","");
	my $oid = guid_seen($db, $feedid, $sha);
	if ($oid > 0) {
		$db = undef;
		return $oid;
	}
	#printf "guid_seen: query returned %s\n",$oid;
	my $query = sprintf "INSERT INTO %s (feedid, guid) VALUES (%d, '%s')",$dbtab,$feedid,$sha;
	if ($verbose > 0) {
		printf STDERR "guid_seen: %s\n",$query;
	}
	my $sth = $db->doquery($query);
	$sth->finish;
	$inserted=1;
	$oid = guid_seen($db, $feedid, $sha);
	$db = undef;
	return $oid;
}

sub
feed_cache {
	my ($feedurl) = @_;
	my $db = FDC::db->new($dsn,"","");
	my $oid = feed_seen($db, $feedurl);
	if ($oid > 0) {
		$db = undef;
		return $oid;
	}
	my $query = sprintf "INSERT INTO %s (feedurl) VALUES ('%s')",
	    $dbfee, $feedurl;
	my $sth = $db->doquery($query);
	$sth->finish;
	$oid = feed_seen($db,$feedurl);
	$inserted=1;
	$db = undef;
	return $oid;
}

# Rate Limited Fork
sub
rlfork
{
	$SIG{CHLD} = \&REAPER;
	my $childcount = scalar keys %children;
	while ($childcount >= ${$conf{'max_concurrency'}}[0]) {
		if ($verbose > 0 || $forkdebug > 0) {
			printf STDERR "%d Parent[%d] z{%d}\n",($entrypid>0)?1:0,$$,$childcount;
		}
		sleep(1);
		$childcount = scalar keys %children;
	}
	my $pid = fork();
	die "Fork: $!" unless defined $pid;
	if ($pid > 0) {
		if ($verbose > 0 || $forkdebug > 0) {
			printf STDERR "%d Parent[%d] +Child[%d] = %d children\n",
			    ($entrypid>0)?1:0,$$,$pid,$childcount+1;
		}
		$children{$pid}=1;
	} else {
		# children don't need to know siblings, do they?
		if (1) {
			if ($pid == 0) {
				%children = ( );
			}
		}
	}
	return $pid;
}

# bits from perlipc(1)
sub REAPER {
	# don't change $! and $?
	local ($!, $?);
	my $child;
	while (($child = waitpid(-1, WNOHANG)) > 0) {
		if (defined($children{$child})) {
			if ($verbose > 0 || $forkdebug > 0) {
				printf STDERR "%d Parent[%d] -Child[%d]\n",($entrypid>0)?1:0,$$,$child;
			}
			delete $children{$child};
		} else {
			if ($verbose > 0 || $forkdebug > 0) {
				printf STDERR "%d Parent[%d] -Orphan[%d]\n",($entrypid>0)?1:0,$$,$child;
			}
		}
	}
	$SIG{CHLD} = \&REAPER;
}

sub
action_show {
	my ($feedid) = @_;
	my ($inspct,$skippct,$total) = (0.0,0.0,0);
	$total = $insertactioncount + $skipactioncount;
	if ($total > 0) {
		if ($insertactioncount > 0) {
			$inspct = $insertactioncount/$total*100;
		}
		if ($skipactioncount > 0) {
			$skippct = $skipactioncount/$total*100;
		}
	}
	printf STDERR
	    "%4d: Inserted/Skipped/Total = %4d(%0.2f%%)/%4d(%0.2f%%)/%4d\n",
	    $feedid, $insertactioncount, $inspct, $skipactioncount, $skippct,
	    $total;
}

